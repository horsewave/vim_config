# Initial setup
set -g default-terminal xterm 
# Prefix
set-option -g prefix C-j
# 即Ctrl+b键，unbind意味着解除绑定
unbind-key C-j
# 绑定Ctrl+j为新的指令前缀
bind-key C-j send-prefix
# 从tmux v1.6版起，支持设置第二个指令前缀
set-option -g prefix2 ` # 设置一个不常用的`键作为指令前缀

# Easy config reload;# 绑定快捷键为r
bind-key r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

 
# Set easier window split keys
unbind '"'
bind-key v split-window -h -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录
unbind %
bind-key h split-window -v -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录 
# bind - splitw -v -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录
# bind | splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录
 


# Allow the arrow key to be used immediately after changing windows.
set-option -g repeat-time 0
 
# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window
 
 
# Double press <prefix> to move to last window
bind-key C-j last-window
 
# No delay for escape key press
set -sg escape-time 0
 
# Window activity monitor: setw: set-window-option的写法，setw就是它的别名
setw -g monitor-activity on
set -g visual-activity on

# Mouse Mode
set -g mouse on
# 对于tmux v2.1(2015.10.28)之前的版本，需加入如下配置：
# set -g mode-mouse on
# set -g mouse-resize-pane on
# set -g mouse-select-pane on
# set -g mouse-select-window on
set -g history-limit 10000
 
# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# # 绑定hjkl键为面板切换的上下左右键
# bind -r k select-pane -U # 绑定k为↑
# bind -r j select-pane -D # 绑定j为↓
# bind -r h select-pane -L # 绑定h为←
# bind -r l select-pane -R # 绑定l为→
# bind m command-prompt "splitw -h 'exec man %%'"   # 绑定m键为在新的panel打开man
# # 绑定P键为开启日志功能，如下，面板的输出日志将存储到桌面
# bind P pipe-pane -o "cat >>~/Desktop/#W.log" \; display "Toggled logging to ~/Desktop/#W.log"
# Easy clear history
#
#
bind-key L clear-history
 
# Lengthen the amount of time status messages are displayed
set-option -g display-time 2000
set-option -g display-panes-time 3000
 
 
# Set the base-index to 1 rather than 0
set -g base-index 1
set-window-option -g pane-base-index 1
 
 
# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on
 
 
# Key bindings for copy-paste:# 开启vi风格后，支持vi的C-d、C-u、hjkl等快捷键
setw -g mode-keys vi
# 快捷键外，复制模式的启用、选择、复制、粘贴等按键也可以向vi风格靠拢。
bind Escape copy-mode # 绑定esc键为进入复制模式
bind -t vi-copy v begin-selection # 绑定v键为开始选择文本
bind -t vi-copy y copy-selection # 绑定y键为复制选中文本
unbind p
bind p pasteb # 绑定p键为粘贴文本（p键默认用于进入上一个窗口，不建议覆盖）
# 以上，绑定 v、y两键的设置只在tmux v2.4版本以下才有效，对于v2.4及以上的版本，绑定快捷键需要使用 -T 选项，发送指令需要使用 -X 选项，请参考如下设置：
# bind -T copy-mode-vi v send-keys -X begin-selection
# bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# unbind p
# bind p paste-buffer
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection
#


# 使用系统粘贴板 存在 于tmux进程中的buffer缓存，虽然可以在会话间共享，但不能直接与系统粘贴板共享，不免有些遗憾。幸运的是，现在我们有成熟的方案来实现这个功能。 Linux中可以使用xclip工具来接入系统粘贴板:sudo apt-get install xclip
# then:
 # buffer缓存复制到Linux系统粘贴板
bind C-c run " tmux save-buffer - | xclip -i -sel clipboard"
# Linux系统粘贴板内容复制到会话
bind C-v run " tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# 按下prefix + Ctrl + c 键，buffer缓存的内容将通过xlip程序复制到粘贴板，按下prefix + Ctrl + v键，tmux将通过xclip访问粘贴板，然后由set-buffer命令设置给buffer缓存，最后由paste-buffer粘贴到tmux会话中。
 
# Tmux Theme and Status 优化
set -g base-index 1 # 设置窗口的起始下标为1
set -g pane-base-index 1 # 设置面板的起始下标为1

set -g status-utf8 on # 状态栏支持utf8
set -g status-interval 1 # 状态栏刷新时间
set -g status-justify left # 状态栏列表左对齐
setw -g monitor-activity on # 非当前窗口有内容更新时在状态栏通知
set -g status-keys vi

set -g status-bg black # 设置状态栏背景黑色
set -g status-fg yellow # 设置状态栏前景黄色
set -g status-style "bg=black, fg=yellow" # 状态栏前景背景色

set -g status-left "#[bg=#FF661D] ❐ #S " # 状态栏左侧内容
set -g status-right 'Continuum status: #{continuum_status}' # 状态栏右侧内容
set -g status-left-length 300 # 状态栏左边长度300
set -g status-right-length 500 # 状态栏左边长度500

set-option -g renumber-windows on
set-window-option -g window-status-format '#[dim]#I:#[default]#W#[fg=grey,dim]'
set-window-option -g window-status-current-format '#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]'
 
# 右下角
set -g status-right '#[fg=green][#[fg=cyan]%Y-%m-%d#[fg=green]]'
# set -wg window-status-format " #I #W " # 状态栏窗口名称格式
# set -wg window-status-current-format " #I:#W#F " # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
# set -wg window-status-separator "" # 状态栏窗口名称之间的间隔
# set -wg window-status-current-style "bg=red" # 状态栏当前窗口名称的样式
# set -wg window-status-last-style "fg=red" # 状态栏最后一个窗口名称的样式
#
# set -g message-style "bg=#202529, fg=#91A8BA" # 指定消息通知的前景、后景色


#
# 开启256 colors支持:默认情况下，tmux中使用vim编辑器，文本内容的配色和直接使用vim时有些差距，此时需要开启256 colors的支持，配置如下。
set -g default-terminal "screen-256color"
# 或者：
# set -g default-terminal "tmux-256color"
#
#或者启动tmux时增加参数-2：
#alias tmux='tmux -2' # Force tmux to assume the terminal supports 256 colours

# 关闭默认的rename机制:tmux默认会自动重命名窗口，频繁的命令行操作，将频繁触发重命名，比较浪费CPU性能，性能差的计算机上，问题可能更为明显。建议添加如下配置关闭rename机制
setw -g automatic-rename off
setw -g allow-rename off

###########################
#  Plugin-Tmux-resurrect  #
###########################
run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux
#Tmux Resurrec提供如下两个操作：
# 保存，快捷指令是prefix + Ctrl + s，tmux状态栏在保存开始，保存后分别提示”Saving…”，”Tmux environment saved !”。
# 恢复，快捷指令是prefix + Ctrl + r，tmux状态栏在恢复开始，恢复后分别提示”Restoring…”，”Tmux restore complete !”。

